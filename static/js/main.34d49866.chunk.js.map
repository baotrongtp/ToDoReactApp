{"version":3,"sources":["components/AddTodo.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","Id","Title","Status","handleIdChange","event","setState","target","value","handleTitleChange","handleStatusChange","handleToDoSubmit","preventDefault","props","onAdd","onSubmit","this","className","onChange","placeholder","type","Component","ToDoList","todos","deleteTodo","todo","filteredItems","filter","x","editTodo","map","addTodo","key","style","color","onClick","icon","library","add","faTrash","faEdit","faPlus","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQACqBA,E,4MACjBC,MAAQ,CACJC,GAAI,GACJC,MAAO,GACPC,OAAQ,W,EAGZC,eAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,GAAII,EAAME,OAAOC,S,EAIzBC,kBAAoB,SAACJ,GACjB,EAAKC,SAAS,CACVJ,MAAOG,EAAME,OAAOC,S,EAI5BE,mBAAqB,SAACL,GAClB,EAAKC,SAAS,CACVH,OAAQE,EAAME,OAAOC,S,EAI7BG,iBAAmB,SAACN,GAChBA,EAAMO,iBACN,EAAKC,MAAMC,MAAM,CACbb,GAAI,EAAKD,MAAMC,GACfC,MAAO,EAAKF,MAAME,MAClBC,OAAQ,EAAKH,MAAMG,SAEvB,EAAKG,SAAS,CACVL,GAAI,GACJC,MAAO,GACPC,OAAQ,a,uDAKZ,OACI,6BACI,wCAGA,0BAAMY,SAAUC,KAAKL,kBACjB,yBAAKM,UAAU,cACX,2BAAOT,MAAOQ,KAAKhB,MAAMC,GAAIiB,SAAUF,KAAKZ,eAAgBa,UAAU,eAAeE,YAAY,cAErG,yBAAKF,UAAU,cACX,2BAAOT,MAAOQ,KAAKhB,MAAME,MAAOgB,SAAUF,KAAKP,kBAAmBQ,UAAU,eAAeE,YAAY,iBAE3G,yBAAKF,UAAU,cACX,4BAAQT,MAAOQ,KAAKhB,MAAMG,OAAQe,SAAUF,KAAKN,mBAAmBO,UAAU,gBAC1E,4BAAQT,MAAM,QAAd,QACA,4BAAQA,MAAM,WAAd,aAGR,4BAAQY,KAAK,SAASH,UAAU,gCAAhC,kB,GA1DiBI,aCGhBC,E,4MAEjBtB,MAAQ,CACJuB,MAAO,CACH,CAAEtB,GAAI,IAAKC,MAAO,gBAAiBC,OAAQ,QAC3C,CAAEF,GAAI,IAAKC,MAAO,YAAaC,OAAQ,a,EAI/CqB,WAAa,SAACC,GACV,IAAMC,EAAgB,EAAK1B,MAAMuB,MAAMI,QAAO,SAAAC,GAAC,OAAIA,EAAE3B,KAAOwB,EAAKxB,MACjE,EAAKK,SAAS,CACViB,MAAOG,K,EAIfG,SAAW,SAACD,GACR,EAAKtB,UAAS,SAAAN,GAAK,MAAK,CACpBuB,MAAOvB,EAAMuB,MAAMO,KAAI,SAAAL,GACnB,OAAIA,EAAKxB,KAAO2B,EAAE3B,GACP,2BACAwB,GADP,IAEItB,OAAwB,SAAhBsB,EAAKtB,OAAoB,UAAY,SAG1CsB,U,EAMvBM,QAAQ,SAACN,GACL,EAAKnB,SAAS,CACViB,MAAM,GAAD,mBAAM,EAAKvB,MAAMuB,OAAjB,CAAwBE,O,uDAG3B,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CAASX,MAAOE,KAAKe,UACrB,wBAAId,UAAU,eAAd,YACA,2BAAOA,UAAU,SACb,+BACI,4BACI,kCACA,qCACA,sCACA,wCAGR,+BACKD,KAAKhB,MAAMuB,MAAMO,KAAI,SAAAF,GAClB,OACI,wBAAII,IAAKJ,EAAE3B,IACP,4BAAK2B,EAAE3B,IACP,4BAAK2B,EAAE1B,OACP,wBAAI+B,MAAO,CAAEC,MAAoB,SAAbN,EAAEzB,OAAoB,QAAU,QAC/CyB,EAAEzB,QAEP,4BACI,4BAAQc,UAAU,iBAAiBkB,QAAS,kBAAM,EAAKX,WAAWI,KAC9D,8BACI,kBAAC,IAAD,CAAiBQ,KAAK,YAG9B,4BAAQnB,UAAU,kBAAkBkB,QAAS,kBAAM,EAAKN,SAASD,KAC7D,8BACI,kBAAC,IAAD,CAAiBQ,KAAK,uB,GAnEhCf,a,cCAkGgB,IAAQC,IAAIC,IAASC,IAAQC,K,IAWtJC,E,uKAPZ,OACG,6BACE,kBAAC,EAAD,W,GAJUC,IAAMtB,WCMJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.34d49866.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nexport default class AddTodo extends Component {\n    state = {\n        Id: \"\",\n        Title: \"\",\n        Status: \"Pending\"\n    };\n\n    handleIdChange=(event) =>{\n        this.setState({ \n            Id: event.target.value\n        });\n    };\n\n    handleTitleChange = (event) => {\n        this.setState({ \n            Title: event.target.value \n        });\n    };\n\n    handleStatusChange = (event) => {\n        this.setState({ \n            Status: event.target.value\n        });\n    };\n\n    handleToDoSubmit = (event) => {\n        event.preventDefault();\n        this.props.onAdd({\n            Id: this.state.Id,\n            Title: this.state.Title,\n            Status: this.state.Status\n        });\n        this.setState({\n            Id: \"\",\n            Title: \"\",\n            Status: \"Pending\"\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <h3>\n                    Add ToDo\n                </h3>\n                <form onSubmit={this.handleToDoSubmit}>\n                    <div className=\"form-group\" >\n                        <input value={this.state.Id} onChange={this.handleIdChange} className=\"form-control\" placeholder=\"Enter Id\" />\n                    </div>\n                    <div className=\"form-group\" >\n                        <input value={this.state.Title} onChange={this.handleTitleChange} className=\"form-control\" placeholder=\"Enter Title\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <select value={this.state.Status} onChange={this.handleStatusChange}className=\"form-control\" >\n                            <option value=\"Done\" >Done</option>\n                            <option value=\"Pending\" >Pending</option>\n                        </select>\n                    </div>\n                    <button type=\"submit\" className=\"form-control btn btn-primary\" >Add Todo</button>\n                </form>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport AddTodo from './AddTodo';\n\nexport default class ToDoList extends Component {\n\n    state = {\n        todos: [\n            { Id: '1', Title: 'Learn ReactJS', Status: 'Done' },\n            { Id: '2', Title: 'Learn PHP', Status: 'Pending' }\n        ]\n    };\n    //Delete todo\n    deleteTodo = (todo) => {\n        const filteredItems = this.state.todos.filter(x => x.Id !== todo.Id);\n        this.setState({\n            todos: filteredItems\n        });\n    }\n    //Edit todo\n    editTodo = (x) => {\n        this.setState(state => ({\n            todos: state.todos.map(todo => {\n                if (todo.Id === x.Id) {\n                    return {\n                        ...todo,\n                        Status: todo.Status === \"Done\" ? \"Pending\" : \"Done\"\n                    };\n                } else {\n                    return todo;\n                }\n            })\n        }));\n    };\n\n    addTodo=(todo) => {\n        this.setState({\n            todos: [...this.state.todos, todo]\n        });\n    };\n    render() {\n        return (\n            <div>\n                <AddTodo onAdd={this.addTodo}></AddTodo>\n                <h1 className=\"text-center\">TodoList</h1>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>Id</th>\n                            <th>Title</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.todos.map(x => {\n                            return (\n                                <tr key={x.Id}>\n                                    <td>{x.Id}</td>\n                                    <td>{x.Title}</td>\n                                    <td style={{ color: x.Status === \"Done\" ? \"green\" : \"red\" }}>\n                                        {x.Status}\n                                    </td>\n                                    <td>\n                                        <button className=\"btn btn-danger\" onClick={() => this.deleteTodo(x)}>\n                                            <span>\n                                                <FontAwesomeIcon icon=\"trash\"></FontAwesomeIcon>\n                                            </span>\n                                        </button>\n                                        <button className=\"btn btn-primary\" onClick={() => this.editTodo(x)}>\n                                            <span>\n                                                <FontAwesomeIcon icon=\"edit\"></FontAwesomeIcon>\n                                            </span>\n                                        </button>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport ToDoList from './components/ToDoList'\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";import { faTrash, faPlus, faEdit } from \"@fortawesome/free-solid-svg-icons\";library.add(faTrash, faEdit, faPlus);\n\nclass App extends React.Component {\n  render() {\n   return (\n      <div>\n        <ToDoList></ToDoList>          \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}